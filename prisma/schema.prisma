generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cars {
  id                   Int      @id @default(autoincrement())
  user_id              Int
  brand                String   @db.Text
  model                String   @db.Text
  vehicle_registration String   @db.Text
  color                String   @db.Text
  created_user_id      Int
  created_at           DateTime @db.DateTime(0)
  updated_user_id      Int
  updated_at           DateTime @db.DateTime(0)
  users                users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "cars_ibfk_1")

  @@index([user_id], map: "cars_ibfk_1")
  @@index([created_user_id], map: "created_user_id")
}

model chat_details {
  id              Int                   @id @default(autoincrement())
  chat_id         Int
  msg_type        chat_details_msg_type
  msg             String                @db.Text
  lat_lng         Json?
  created_at      DateTime              @db.DateTime(0)
  created_user_id Int
  updated_at      DateTime              @db.DateTime(0)
  updated_user_id Int
  chats           chats                 @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_details_ibfk_1")
  users           users                 @relation(fields: [created_user_id], references: [id], onUpdate: Restrict, map: "chat_details_ibfk_2")
  chat_user_logs  chat_user_logs[]

  @@index([chat_id], map: "chat_id")
  @@index([created_user_id], map: "created_user_id")
}

model chat_user_logs {
  id              Int          @id @default(autoincrement())
  chat_id         Int
  chat_detail_id  Int
  user_id         Int
  created_at      DateTime     @db.DateTime(0)
  created_user_id Int
  updated_at      DateTime     @db.DateTime(0)
  updated_user_id Int
  chats           chats        @relation(fields: [chat_id], references: [id], onUpdate: Restrict, map: "chat_user_logs_ibfk_1")
  chat_details    chat_details @relation(fields: [chat_detail_id], references: [id], onUpdate: Restrict, map: "chat_user_logs_ibfk_2")
  users           users        @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "chat_user_logs_ibfk_3")

  @@index([chat_detail_id], map: "chat_detail_id")
  @@index([chat_id], map: "chat_id")
  @@index([user_id], map: "user_id")
}

model chats {
  id              Int              @id @default(autoincrement())
  chat_type       chats_chat_type
  send_user_id    Int?
  send_post_id    Int?
  created_at      DateTime         @db.DateTime(0)
  created_user_id Int
  updated_at      DateTime         @db.DateTime(0)
  updated_user_id Int
  chat_details    chat_details[]
  chat_user_logs  chat_user_logs[]
  created_user    users            @relation("chats_created_user_idTousers", fields: [created_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chats_ibfk_1")
  send_user       users?           @relation("chats_send_user_idTousers", fields: [send_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chats_ibfk_2")
  posts           posts?           @relation(fields: [send_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chats_ibfk_3")

  @@index([created_user_id], map: "created_user_id")
  @@index([send_post_id], map: "send_post_id")
  @@index([send_user_id], map: "send_user_id")
}

model districts {
  id                                       Int       @id
  name_th                                  String    @db.VarChar(150)
  name_en                                  String    @db.VarChar(150)
  province_id                              Int
  created_at                               DateTime? @db.DateTime(0)
  updated_at                               DateTime? @db.DateTime(0)
  provinces                                provinces @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "districts_ibfk_1")
  posts_posts_start_district_idTodistricts posts[]   @relation("posts_start_district_idTodistricts")
  posts_posts_end_district_idTodistricts   posts[]   @relation("posts_end_district_idTodistricts")

  @@index([province_id], map: "province_id")
}

model post_details {
  id                   Int      @id @default(autoincrement())
  post_id              Int
  lat_lng_start        Json
  lat_lng_end          Json
  seat                 Int      @default(1)
  price                Decimal  @db.Decimal(10, 2)
  description          String?  @db.Text
  brand                String   @db.Text
  model                String   @db.Text
  vehicle_registration String   @db.Text
  color                String   @db.Text
  created_at           DateTime @db.DateTime(0)
  created_user_id      Int
  updated_at           DateTime @db.DateTime(0)
  updated_user_id      Int
  posts                posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_details_ibfk_1")

  @@index([post_id], map: "post_id")
}

model post_members {
  id              Int      @id @default(autoincrement())
  post_id         Int
  user_id         Int
  created_at      DateTime @db.DateTime(0)
  created_user_id Int
  updated_at      DateTime @db.DateTime(0)
  updated_user_id Int
  posts           posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_members_ibfk_1")
  users           users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "post_members_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model posts {
  id                Int                @id @default(autoincrement())
  name_start        String             @db.Text
  name_end          String             @db.Text
  start_district_id Int
  end_district_id   Int
  date_time_start   DateTime?          @db.DateTime(0)
  date_time_back    DateTime?          @db.DateTime(0)
  status            posts_status
  created_user_id   Int
  created_at        DateTime           @db.DateTime(0)
  updated_user_id   Int
  updated_at        DateTime           @db.DateTime(0)
  is_back           Boolean?           @default(false)
  chats             chats[]
  post_details      post_details[]
  post_members      post_members[]
  start_district    districts          @relation("posts_start_district_idTodistricts", fields: [start_district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_1")
  end_district      districts          @relation("posts_end_district_idTodistricts", fields: [end_district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_2")
  users             users              @relation(fields: [created_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_3")
  review_user_logs  review_user_logs[]
  reviews           reviews[]

  @@index([created_user_id], map: "created_user_id")
  @@index([end_district_id], map: "end_amphure_id")
  @@index([start_district_id], map: "start_amphure_id")
}

model provinces {
  id         Int         @id
  name_th    String      @db.VarChar(150)
  name_en    String      @db.VarChar(150)
  region_id  Int
  created_at DateTime?   @db.DateTime(0)
  updated_at DateTime?   @db.DateTime(0)
  districts  districts[]
  regions    regions     @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "provinces_ibfk_1")

  @@index([region_id], map: "geography_id")
}

model regions {
  id        Int         @id
  name      String      @db.VarChar(255)
  provinces provinces[]
}

model review_user_logs {
  id              Int      @id @default(autoincrement())
  post_id         Int
  user_id         Int
  created_at      DateTime @db.DateTime(0)
  created_user_id Int
  updated_at      DateTime @db.DateTime(0)
  updated_user_id Int
  posts           posts    @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "review_user_logs_ibfk_1")
  users           users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "review_user_logs_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model reviews {
  id                    Int      @id @default(autoincrement())
  post_id               Int
  user_id               Int
  score                 Int
  description           String   @db.Text
  created_user_id       Int
  created_at            DateTime @db.DateTime(0)
  updated_user_id       Int
  updated_at            DateTime @db.DateTime(0)
  users_reviews         users    @relation("reviews_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")
  users_reviews_created users    @relation("reviews_created_user_idTousers", fields: [created_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_2")
  posts                 posts    @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "reviews_ibfk_3")

  @@index([created_user_id], map: "created_user_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model user_roles {
  id              Int      @id @default(autoincrement())
  user_role_name  String   @db.VarChar(100)
  created_at      DateTime @db.DateTime(0)
  cerated_user_id Int
  updated_at      DateTime @db.DateTime(0)
  updated_user_id Int
  users           users[]
}

model users {
  id                                     Int                @id @default(autoincrement())
  username                               String             @unique(map: "username") @db.VarChar(100)
  password                               String             @db.VarChar(100)
  first_name                             String?            @db.VarChar(100)
  last_name                              String?            @db.VarChar(100)
  email                                  String             @db.VarChar(30)
  user_role_id                           Int                @default(5)
  locale                                 String?            @db.Text
  img_path                               String?            @default("non_img.png") @db.VarChar(30)
  sex                                    users_sex
  enabled                                Int                @default(1) @db.TinyInt
  created_at                             DateTime?          @db.DateTime(0)
  created_user_id                        Int
  updated_at                             DateTime?          @db.DateTime(0)
  updated_user_id                        Int
  cars                                   cars[]
  chat_details                           chat_details[]
  chat_user_logs                         chat_user_logs[]
  chats_chats_created_user_idTousers     chats[]            @relation("chats_created_user_idTousers")
  chats_chats_send_user_idTousers        chats[]            @relation("chats_send_user_idTousers")
  post_members                           post_members[]
  posts                                  posts[]
  review_user_logs                       review_user_logs[]
  reviews_reviews_user_idTousers         reviews[]          @relation("reviews_user_idTousers")
  reviews_reviews_created_user_idTousers reviews[]          @relation("reviews_created_user_idTousers")
  user_roles                             user_roles         @relation(fields: [user_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([user_role_id], map: "users_ibfk_1")
}

enum chats_chat_type {
  PRIVATE
  GROUP
}

enum posts_status {
  NEW
  IN_PROGRESS
  DONE
  CANCEL
}

enum chat_details_msg_type {
  MSG
  LOCATION
}

enum users_sex {
  Male
  Famale
}
